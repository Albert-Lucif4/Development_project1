/* -*- C++ -*- */
/* Generated by D:\openDDS\OpenDDS-3.14\bin\opendds_idl version 3.14 (ACE version 6.5.12) running on input file instruction.idl */
#ifndef OPENDDS_IDL_GENERATED_INSTRUCTIONTYPESUPPORTIMPL_H_DHZE5Z
#define OPENDDS_IDL_GENERATED_INSTRUCTIONTYPESUPPORTIMPL_H_DHZE5Z
#include "instructionC.h"
#include "dds/DCPS/Definitions.h"
#include "dds/DdsDcpsC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/TypeSupportImpl.h"
#include "instructionTypeSupportC.h"


/* Begin MODULE: CORBA */


/* End MODULE: CORBA */


/* Begin MODULE: instruction */



/* Begin STRUCT: instruct */

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

void gen_find_size(const instruction::instruct& stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, const instruction::instruct& stru);

bool operator>>(Serializer& strm, instruction::instruct& stru);

size_t gen_max_marshaled_size(const instruction::instruct& stru, bool align);

size_t gen_max_marshaled_size(KeyOnly<const instruction::instruct> stru, bool align);

void gen_find_size(KeyOnly<const instruction::instruct> stru, size_t& size, size_t& padding);

bool operator<<(Serializer& strm, KeyOnly<const instruction::instruct> stru);

bool operator>>(Serializer& strm, KeyOnly<instruction::instruct> stru);

template <>
struct MarshalTraits<instruction::instruct> {
  static bool gen_is_bounded_size() { return false; }
  static bool gen_is_bounded_key_size() { return true; }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace instruction {
/// This structure supports use of std::map with one or more keys.
struct  instruct_OpenDDS_KeyLessThan {
  bool operator()(const instruction::instruct& v1, const instruction::instruct& v2) const
  {
    using ::operator<; // TAO::String_Manager's operator< is in global NS
    if (v1.id < v2.id) return true;
    if (v2.id < v1.id) return false;
    return false;
  }
};
}


namespace instruction {
class instructTypeSupportImpl;
}

OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {
template <>
struct DDSTraits<instruction::instruct> {
  typedef instruction::instruct MessageType;
  typedef instruction::instructSeq MessageSequenceType;
  typedef instruction::instructTypeSupport TypeSupportType;
  typedef instruction::instructTypeSupportImpl TypeSupportTypeImpl;
  typedef instruction::instructDataWriter DataWriterType;
  typedef instruction::instructDataReader DataReaderType;
  typedef instruction::instruct_OpenDDS_KeyLessThan LessThanType;

  static const char* type_name () { return "instruction::instruct"; }
  static bool gen_has_key () { return true; }
  static size_t key_count () { return 1; }

  static size_t gen_max_marshaled_size(const MessageType& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const MessageType& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }

  static size_t gen_max_marshaled_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& x, bool align) { return ::OpenDDS::DCPS::gen_max_marshaled_size(x, align); }
  static void gen_find_size(const OpenDDS::DCPS::KeyOnly<const MessageType>& arr, size_t& size, size_t& padding) { ::OpenDDS::DCPS::gen_find_size(arr, size, padding); }
};
}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL


namespace instruction {
class  instructTypeSupportImpl
  : public virtual OpenDDS::DCPS::LocalObject<instructTypeSupport>
  , public virtual OpenDDS::DCPS::TypeSupportImpl
{
public:
  typedef OpenDDS::DCPS::DDSTraits<instruct> TraitsType;
  typedef instructTypeSupport TypeSupportType;
  typedef instructTypeSupport::_var_type _var_type;
  typedef instructTypeSupport::_ptr_type _ptr_type;

  instructTypeSupportImpl() {}
  virtual ~instructTypeSupportImpl() {}

  virtual ::DDS::DataWriter_ptr create_datawriter();
  virtual ::DDS::DataReader_ptr create_datareader();
#ifndef OPENDDS_NO_MULTI_TOPIC
  virtual ::DDS::DataReader_ptr create_multitopic_datareader();
#endif /* !OPENDDS_NO_MULTI_TOPIC */
#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
  virtual const OpenDDS::DCPS::MetaStruct& getMetaStructForType();
#endif /* !OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE */
  virtual bool has_dcps_key();
  const char* default_type_name() const;
  static instructTypeSupport::_ptr_type _narrow(CORBA::Object_ptr obj);
};
}

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
OPENDDS_BEGIN_VERSIONED_NAMESPACE_DECL
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
const MetaStruct& getMetaStruct<instruction::instruct>();
bool gen_skip_over(Serializer& ser, instruction::instruct*);

}  }
OPENDDS_END_VERSIONED_NAMESPACE_DECL

#endif

/* End STRUCT: instruct */

/* End MODULE: instruction */
#endif /* OPENDDS_IDL_GENERATED_INSTRUCTIONTYPESUPPORTIMPL_H_DHZE5Z */
